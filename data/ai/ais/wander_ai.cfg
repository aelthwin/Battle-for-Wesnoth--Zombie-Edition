#textdomain wesnoth

# see http://wiki.wesnoth.org/Customizing_AI_in_Wesnoth_1.8 for tips

[ai]
    id=wander_ai
    description=_"Multiplayer_AI^WANDER AI" # CSC 591
    version=10710
            [engine]
                name="lua"
                code= <<
--! ==============================================================
local ai = ...
local wander_ai = { }

--! TLB @TODO
--! Looking at stdlib.lua... do we really even need to do this?
local ai_stdlib = wesnoth.require('ai/lua/stdlib.lua');
ai_stdlib.init(ai)

--! wesnoth.* functions defined in src/scripting/lua.cpp
--! ai.*      functions defined in src/ai/lua/core.cpp
 
--! TLB @TODO
--! move this into a wander_ai/main.lua so we can have syntax highlighting
 
function wander_ai:do_moves()
       --! Most of this comes from scenario-lua-ai.cfg
       --! plenty of example lua code floating around in the codebase
       --! if you do a grep for "get_units"... found this while trying to discover
       --! where get_units was defined... turns out it's in lua.cpp (see above)

       --! Used this next line to verify that the do_moves function was called
       --! by the stage configuration below... it worked  :)
       --! wesnoth.message ('doing moves!')
       units = wesnoth.get_units({canrecruit = true, side = ai.side})
       --! move (partial move)
       --! ai.move(units[1],13, 22)
       --! full move. note that the my_leader still can be used altrough x and y are now different.
       --! ai.move_full(units[1], 11, 23)

       --! attack with auto weapon/aggression
       --! ai.attack(2, 12, 3, 12)
       --! attack with weapon selected
       --! ai.attack(3, 11, 3, 12, 1)
       --! attack with different aggression
       --! ai.attack(3, 13, 3, 12, -1, 0.9)
end

return wander_ai
--! ==============================================================
>>
            [/engine]
    [stage]
        engine="lua"
        code="(...):do_moves()"
    [/stage]
[/ai]
